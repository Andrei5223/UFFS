# Comandos
\d
	-mostra as relações existentes no banco atual
\l
	-mostra todos os bancos de dados existentes
\i
	-executa um script
\c <banco> <usuario>
	-navega pelo banco com um certo usuario
\du
	-list all users
select current_user;
	-mostra o usuario atual
create user andrei password '123';
	-cria um novo user com senha
create database <nome>;
	-cria um novo banco de dados
select current_time
	-analogo para hora
show datestyle
	-exibe o estilo de data
set datestyle
	-seta um tipo de data
\pset pager off
	-formatacao da exibição
vacuum;
	-limpa a reorganiza o banco
insert into <table> (<instance>, <instance>) values (<values>, <values>);

# Acessar um banco
psql -U <usuario> -h <servidor> -d <banco>
psql -U dduarte -h localhost -d postgres
psql -U postgres -h localhost //senha: postgres

# Tipos de dados
integer > 4 bytes
real > 4 bytes (6 decimais)
numeric(tamanho, casas decimais) > (6,4) > 99.9999
varchar(n) > n = tamanho maximo
serial > incrementa automaticamente

# DDL controlar objetos do BD
create table
alter table
drop table

# DML controlar dados do BD
insert
select
	select <o que é pedido (corte vertical)> from <da tabela que a contem> where <condições (corte horizontal)> 
delete
update

postgres=# //super usuario
postgres=> //usuario

Evitar usar 'distinct', 'or' ou '*' pois exigem mais do banco

# Select
select t.valor, t.valor*1.2 from tarifa t; //fazer contas
select ... case when valor < 10 then 'blabla' when valor >= then 'bleble' end case //altera o escrito no retorno
select codcli as "Código cliente" from ... //altera o nome da coluna no retorno
Função coalesce: Substitui o NULL por um valor.


Retornar os dados das locações em que os carros ainda nao foram retornados, ou nao foram devolvidos.
Retornar as placa do carro e a data de locacao para os carros que foram locados em setembro de 2020.
	select placa, dtloca from locacao where dtloca between '01-09-2020' and '30-09-2020';
Retornar placa do carro, codigo cliente e a data de devolução para as locacoes cuja a tarifa foram blue ou green.
	select placa, codcli, dtdevo from locacao where tarifa = 'blue' or tarifa = 'green';
	select placa, codcli, dtdevo from locacao where tarifa in ('blue', 'green');
Retorne os dados das locacoes feitas pelo cliente C34 na tarifa red
	 select * from locacao where codcli='C34' and tarifa = 'red';
Retorne todas as tarifas que nao foram usadas em nenhum locacao.
	select *
	from tarifa
	where descr not in
	(select tarifa
	from locacao);
Retornar a descrição e preço das tarifas, além da classe da tarifa:
<50 barata
<80 media
senao cara
	select descr, valor, case when valor < 50 then 'barata'
				  when valor < 80 then 'media'
				  else 'cara'
				  end as classe
	from tarifa;


# É possível aninhar um select no from
select codcli
from (select * from locacao) t;

# Limitar saida do select
select ... where ... limit 10;

# Operadores de conjuntos:
except - Interceção

NAO FAZER: https://pgexercises.com/questions/basic/
-Combining multiple queries;
-Simple aggregation
-More aggregation

# Exercicios BDlcinema
1. update avaliacao set coment = 'Uau! Took my breath away!!!' where coment = 'Uau! Tooke my breath away!!!';

2. insert into avaliacao (codf, email, nestrelas, coment) values ('30', 'jaws@gmail.com', 5, 'Super fã dos filmes Tubarão');

3. insert into pessoa (codp, nome, dtnasc, paisn) values (177, 'Andrei', '16/06/2003', 'Brasil');
   insert into elenco(codf, codp, codpapel, oscar) values (30, 177, 5, 'N');
   
4. select filme.titulo, pessoa.nome from filme join pessoa on filme.codd=pessoa.codp;
   NÃO FAZER: select filme.titulo, pessoa.nome from filme, pessoa where filme.codd=pessoa.codp;
   
5. select filme.titulo from filme join pessoa on filme.codd=pessoa.codp where pessoa.nome = 'Alfred';

6. select pessoa.nome from pessoa join elenco on pessoa.codp = elenco.codp where (elenco.oscar) = 'Y';
   // Retornar o nome e o título do filme que ela ganhou Oscar
   	select pessoa.nome, filme.titulo from pessoa join elenco on pessoa.codp = elenco.codp join filme on filme.codf = elenco.codf where upper(elenco.oscar) = 'Y';
   // Contar quantos Oscar tem cada pessoa
   	select p.nome, count(e.codp) from pessoa p left join (select elenco.codp from elenco where oscar='Y') e on p.codp=e.codp group by p.nome;
   	
7. select f.titulo, f.anol, f.dur, p.nome from filme f join elenco e on f.codf=e.codf join pessoa p on e.codp=p.codp;
   // Exibir os filmes sem elenco:
   	select f.titulo, f.anol, f.dur, case when p.nome is null then 'Sem elenco' else p.nome end as nome from filme f left join elenco e on f.codf=e.codf left join pessoa p on e.codp=p.codp;
   	select f.titulo, f.anol, f.dur, coalesce(p.nome, 'Sem elenco') as nome from filme f left join elenco e on f.codf=e.codf left join pessoa p on e.codp=p.codp;
   	
8. select distinct filme.titulo from avaliacao join filme on avaliacao.codf = filme.codf where avaliacao.nestrelas = 5;
   select filme.titulo from avaliacao join filme on avaliacao.codf = filme.codf where avaliacao.nestrelas = 5 group by filme.titulo;
   
9. select f.titulo from filme f join elenco e on f.codf = e.codf join pessoa p on e.codp = p.codp where p.nome='Stephen';

10. select p.nome, f.titulo from filme f right join elenco e on f.codf = e.codf right join pessoa p on e.codp = p.codp;
    select p.nome, f.titulo from pessoa p left join elenco e on p.codp = e.codp left join filme f on e.codf = f.codf;

11. select p.nome from pessoa p left join elenco e on e.codp = p.codp where e.codf is null;
    select p.nome from pessoa p where p.codp not in (select e.codp from elenco e);
    select p.nome from pessoa p except select p.nome from pessoa p join elenco e on p.codp=e.codp;
    // Remover quem foi diretor
    select p.nome from pessoa p where p.codp not in (select e.codp from elenco e) and p.codp not in (select f.codd from filme f);
    
12. select f.titulo from filme f left join avaliacao a on f.codf = a.codf where a.nestrelas is null;

13. select f.titulo, f.dur from filme f where anol between 1961 and 1970;

14. select p.nome from pessoa p join elenco e on p.codp = e.codp where e.codpapel = 5;

15. select count(coment) from avaliacao where email = 'cinefilo@yahoo.com';

16. select paisn, count(codp) from pessoa group by paisn;

17. select p.nome from pessoa p where dtnasc = (select min(dtnasc) from pessoa);

18. select * from filme where dur = (select min(dur) from filme);
    // Obter filmes com a duracao maior que a média
    select * from filme where dur > (select avg(dur) from filme);
   
19. select f.titulo, count(e.codf) from filme f natural left join elenco e group by f.titulo;

20. select f.titulo, coalesce(round(avg(a.nestrelas), 2), -1) from filme f natural left join avaliacao a group by f.titulo;
    select f.titulo, coalesce(round(avg(a.nestrelas), 2)::text, 'None') from filme f natural left join avaliacao a group by f.titulo;

explain select p.nome
from pessoa p
where p.codp not in (select codp from elenco);

explain select p.nome
from pessoa p left join elenco e on p.codp = e.codp
where e.codp is null;

explain select p.nome
from pessoa p
except
select p.nome
from pessoa p join elenco e on p.codp = e.codp;

explain select p.nome from pessoa p
where not exists (select 1 from elenco e where e.codp=p.codp);

MARINE
Q1: select s.* from sailor s natural join reserve r where r.bid = 103;
Q1A: select s.* from sailor s where not exists (select 1 from reserve r where r.bid = 103 and r.sid=s.sid);
    select * from sailor s where s.sid not in (select r.sid from reserve r where bid=103);
    select s.* from sailor s except select s.* from sailor s natural join reserve r where r.bid=103;
    // Da pra fazer com join tbm
Q2: select s.* from sailor s natural join reserve r natural join boat b where b.color = 'red';
Q3: select distinct b.color from boat b natural join reserve r natural join sailor s where s.sname='Lubber';
Q4: select s.sname from sailor s natural join reserve r;
Q5: select s.sname from sailor s natural join reserve r natural join boat b where b.color in ('red', 'green');
Q6:

QA: Retornar id e nome dos navegadores com suas respecivas quantidades de reservas
select sid, sname, count(r.bid) as qtd_reservas from sailor s natural left join reserve r group by sid;
   	
QB: Retornar todos os navegadores com ranking maior que 2 que fizeram o maior número de reservas
select s.sname from sailor s natural join reserve r where s.rating > 2 group by s.sid having count(*) = (select max(qt) as mx from (select count(*) as qt from sailor s natural join reserve r where s.rating > 2 group by r.sid) t);

with sailorg2 as (select sid, sname from sailor where rating > 2), reserveqt as (select count(*) as qt from sailorg2 natural join reserve r group by r.sid), reservemx as (select max(qt) as mx from reserveqt) select s.sid, s.sname from sailorg2 s natural join reserve r group by s.sid, s.sname having count(*)=(select mx from reservemx);

QC: Retornar a cor de barco mais frequente
select color from boat group by color having count(*) = (select max(qt) as mx from (select count(*) as qt from boat group by color) t );

QX: Retorna a maior quantidade de reservas
select max(qtd) from (select count(*) as qtd from reserve group by sid) t;

select s.sname
from sailor s join reserve r on s.sid=r.sid
join boat b on r.bid = b.bid
where s.sid in (select r.sid from reserve r natural join boat b where b.color='green')
and s.sid in (select r.sid from reserve r natural join boat b where b.color='red');

select s.sname from sailor s 
join reserve rr on s.sid=rr.sid 
join boat br on rr.bid=br.bid 
join reserve rg on s.sid=rg.sid 
join boat bg on rg.bid=bg.bid
where bg.color='green' and br.color='red';
