<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>BN</string>
        </entry>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>reset,escolha_jogador:4,codificacao_barco_inserido:4,orientacao,barco:3,modo,clock</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Entidade principal
ENTITY BN IS
    PORT(
        --Reinicia o jogo
        reset : IN STD_LOGIC;

        --Posicao escolhida pelo jogador para atacar
        escolha_jogador : IN STD_LOGIC_VECTOR(3 downto 0);

        -- Codificacao do barco sendo inserido
        codificacao_barco_inserido : IN STD_LOGIC_VECTOR(3 downto 0); 

        -- Orientacao do barco 3, 0 = HORIZONTAL, 1 = VERTICAL
        orientacao: IN STD_LOGIC;

        -- Número do barco a ser inserido, sendo [1,0,0] = barco1, [0,1,0] = barco2, [0,0,1] = barco3
        barco: IN STD_LOGIC_VECTOR(2 downto 0);

        -- Modo atual. 0 = Inserir barcos, 1 = Modo de jogo
        modo: IN STD_LOGIC;

        clock: IN STD_LOGIC;

        -- Ativa quando um input é inválido
        input_invalido: OUT STD_LOGIC;

        -- Acende caso tenha acertado o alvo
        acertou: OUT STD_LOGIC;

        -- Acende caso tenha errado o alvo
        errou: OUT STD_LOGIC;

        -- Exibe a quantidade de jogadas restantes
        jogadas_restantes: OUT STD_LOGIC_VECTOR(2 downto 0);

        --Exibe a quantidade de acertos necessários
        acertos_restantes: OUT STD_LOGIC_VECTOR(2 downto 0);

        --Saidas de debug (apagar dps)
        posicao1: OUT STD_LOGIC_VECTOR(3 downto 0);
        posicao2: OUT STD_LOGIC_VECTOR(3 downto 0); 
        posicao3: OUT STD_LOGIC_VECTOR(3 downto 0); 
        posicao4: OUT STD_LOGIC_VECTOR(3 downto 0);
        linhaOut: OUT STD_LOGIC_VECTOR(1 downto 0);
        colunaOut: OUT STD_LOGIC_VECTOR(1 downto 0)
    );
END BN;


-- Cria tabuleiro
ARCHITECTURE Behavior_Tabuleiro OF BN IS 

                                    -- indices da matriz (3 em inteiro)            -- Conteudo do indice (vetor de 4 bits)
    TYPE matriz_tabuleiro IS ARRAY (natural range 0 to 3, natural range 0 to 3) of std_logic_vector(3 downto 0);
    SIGNAL matriz : matriz_tabuleiro;   -- Cria matriz

BEGIN

    --Criação da matriz do tabuleiro
    matriz(0, 0) &lt;= &quot;0110&quot;;
    matriz(0, 1) &lt;= &quot;1101&quot;;
    matriz(0, 2) &lt;= &quot;1000&quot;;
    matriz(0, 3) &lt;= &quot;0011&quot;;
    matriz(1, 0) &lt;= &quot;0000&quot;;
    matriz(1, 1) &lt;= &quot;1001&quot;;
    matriz(1, 2) &lt;= &quot;0001&quot;;
    matriz(1, 3) &lt;= &quot;1011&quot;;
    matriz(2, 0) &lt;= &quot;0111&quot;;
    matriz(2, 1) &lt;= &quot;0100&quot;;
    matriz(2, 2) &lt;= &quot;1110&quot;;
    matriz(2, 3) &lt;= &quot;0010&quot;;
    matriz(3, 0) &lt;= &quot;0101&quot;;
    matriz(3, 1) &lt;= &quot;1111&quot;;
    matriz(3, 2) &lt;= &quot;1010&quot;;
    matriz(3, 3) &lt;= &quot;1100&quot;;

    PROCESS (clock, reset)

    --Para salvar a codificacao das posicoes escolhidas
	variable pos1 : STD_LOGIC_VECTOR(3 downto 0);
	variable pos2: STD_LOGIC_VECTOR(3 downto 0);
	variable pos3 : STD_LOGIC_VECTOR(3 downto 0);
	variable pos4: STD_LOGIC_VECTOR(3 downto 0);

    --Para salvar quais posicoes ja foram acertadas
    variable acertos: STD_LOGIC_VECTOR(3 downto 0) := &quot;0000&quot;;

    --Serve para separar o dado de entrada
    variable linhaVet: std_logic_vector(1 downto 0);
    variable colunaVet: std_logic_vector(1 downto 0);

    --Armazena a linha e coluna disparada
    variable linha : integer;
    variable coluna : integer;

    --Armazena a quantidade de jogadas restantes
    variable jogadas : integer := 6;

    --Armazena a quantidade de acertos necessários
    variable acertos_necessarios : integer := 4;

    BEGIN

    -- Reinicia todos sinais e variaveis
    IF (reset = &apos;1&apos;) or (jogadas = 0) or (acertos_necessarios = 0) then
        input_invalido &lt;= &apos;0&apos;;
        acertou &lt;= &apos;0&apos;;
        errou &lt;= &apos;0&apos;;     
        jogadas_restantes &lt;= &quot;000&quot;;
        acertos_restantes &lt;= &quot;000&quot;;
        acertos := &quot;0000&quot;;
        pos1 := &quot;0000&quot;;
        pos2 := &quot;0000&quot;;
        pos3 := &quot;0000&quot;;
        pos4 := &quot;0000&quot;;
        jogadas := 6;
        acertos_necessarios := 4;

    -- Executa com o clock
    ELSIF (Clock&apos;EVENT AND Clock = &apos;1&apos;) then

        -- Reset das saídas
        input_invalido &lt;= &apos;0&apos;;
        acertou &lt;= &apos;0&apos;;
        errou &lt;= &apos;0&apos;;

        -- Codificacao para o modo 0, inserir barcos
        IF modo = &apos;0&apos; then

            -- Impede que sejam inseridos barcos em posições ja ocupadas
            IF (pos1 = codificacao_barco_inserido) or (pos2 = codificacao_barco_inserido) or (pos3 = codificacao_barco_inserido) or (pos4 = codificacao_barco_inserido) then
                input_invalido &lt;= &apos;1&apos;;
            -- Codificacao para o barco 1
            ELSIF barco = &quot;100&quot; then

                --Atribui diretamente à variavel
                pos1 := codificacao_barco_inserido;

            -- Codificacao para o barco 2
            ELSIF barco = &quot;010&quot; then

                --Atribui diretamente à variavel
                pos2 := codificacao_barco_inserido;

            -- Codificacao para o barco 3
            ELSIF barco = &quot;001&quot; then
                --Codificacao para barco horizontal
                IF orientacao = &apos;0&apos; then

                    -- Verifica se a posicao e valida
                    IF (codificacao_barco_inserido = &quot;0011&quot;) or (codificacao_barco_inserido = &quot;1011&quot;) or (codificacao_barco_inserido = &quot;0010&quot;) or (codificacao_barco_inserido = &quot;1100&quot;) then
                        input_invalido &lt;= &apos;1&apos;;
                    else
                        --Atribui diretamente a variavel
                        pos3 := codificacao_barco_inserido;

                        --Encontra a pos4
                        IF codificacao_barco_inserido = matriz(0,0) then
                            pos4 := matriz(0,1);
                        ELSIF codificacao_barco_inserido = matriz(0,1) then
                            pos4 := matriz(0,2);
                        ELSIF codificacao_barco_inserido = matriz(0,2) then
                            pos4 := matriz(0,3);
                        ELSIF codificacao_barco_inserido = matriz(1,0) then
                            pos4 := matriz(1,1);
                        ELSIF codificacao_barco_inserido = matriz(1,1) then
                            pos4 := matriz(1,2);
                        ELSIF codificacao_barco_inserido = matriz(1,2) then
                            pos4 := matriz(1,3);
                        ELSIF codificacao_barco_inserido = matriz(2,0) then
                            pos4 := matriz(2,1);
                        ELSIF codificacao_barco_inserido = matriz(2,1) then
                            pos4 := matriz(2,2);
                        ELSIF codificacao_barco_inserido = matriz(2,2) then
                            pos4 := matriz(2,3);
                        ELSIF codificacao_barco_inserido = matriz(3,0) then
                            pos4 := matriz(3,1);
                        ELSIF codificacao_barco_inserido = matriz(3,1) then
                            pos4 := matriz(3,2);
                        ELSIF codificacao_barco_inserido = matriz(3,2) then
                            pos4 := matriz(3,3);
                        END IF;

                    END IF;
                --Codificacao para barco vertical
                else
                    -- Verifica se a posicao e valida
                    IF (codificacao_barco_inserido = &quot;0101&quot;) or (codificacao_barco_inserido = &quot;1111&quot;) or (codificacao_barco_inserido = &quot;1010&quot;) or (codificacao_barco_inserido = &quot;1100&quot;) then
                        input_invalido &lt;= &apos;1&apos;;
                    else
                        --Atribui diretamente a variavel
                        pos3 := codificacao_barco_inserido;

                        --Encontra a pos4
                        IF codificacao_barco_inserido = matriz(0,0) then
                            pos4 := matriz(1,0);
                        ELSIF codificacao_barco_inserido = matriz(1,0) then
                            pos4 := matriz(2,0);
                        ELSIF codificacao_barco_inserido = matriz(2,0) then
                            pos4 := matriz(3,0);
                        ELSIF codificacao_barco_inserido = matriz(0,1) then
                            pos4 := matriz(1,1);
                        ELSIF codificacao_barco_inserido = matriz(1,1) then
                            pos4 := matriz(2,1);
                        ELSIF codificacao_barco_inserido = matriz(2,1) then
                            pos4 := matriz(3,1);
                        ELSIF codificacao_barco_inserido = matriz(0,2) then
                            pos4 := matriz(1,2);
                        ELSIF codificacao_barco_inserido = matriz(1,2) then
                            pos4 := matriz(2,2);
                        ELSIF codificacao_barco_inserido = matriz(2,2) then
                            pos4 := matriz(3,2);
                        ELSIF codificacao_barco_inserido = matriz(0,3) then
                            pos4 := matriz(1,3);
                        ELSIF codificacao_barco_inserido = matriz(1,3) then
                            pos4 := matriz(2,3);
                        ELSIF codificacao_barco_inserido = matriz(2,3) then
                            pos4 := matriz(3,3);
                        END IF;
                    END IF;
                END IF;


            END IF; --BARCOS


        -- Codificacao para o modo 1, modo de jogo
        else
            -- Converte a escolha para dois inteiros (porque esta invertido? porque Deus quis assim)
            colunaVet(0) := escolha_jogador(0);
            colunaVet(1) := escolha_jogador(1);
            linhaVet(0) := escolha_jogador(2);
            linhaVet(1) := escolha_jogador(3);
            linha := to_integer((unsigned(linhaVet)));
            coluna := to_integer((unsigned(colunaVet)));
            
            --Verifica se acertou ou errou e faz as alterações devidas
            IF (matriz(linha, coluna) = pos1 and acertos(0) = &apos;0&apos;) then
                acertou &lt;= &apos;1&apos;;
                acertos(0) := &apos;1&apos;;
                acertos_necessarios := acertos_necessarios - 1;
                IF jogadas &gt; 1 then
                    jogadas := jogadas - 1;
                END IF;
            ELSIF (matriz(linha, coluna) = pos2 and acertos(1) = &apos;0&apos;) then
                acertou &lt;= &apos;1&apos;;
                acertos(1) := &apos;1&apos;;
                acertos_necessarios := acertos_necessarios - 1;
                IF jogadas &gt; 1 then
                    jogadas := jogadas - 1;
                END IF;
            ELSIF (matriz(linha, coluna) = pos3 and acertos(2) = &apos;0&apos;) then
                acertou &lt;= &apos;1&apos;;
                acertos(2) := &apos;1&apos;;
                acertos_necessarios := acertos_necessarios - 1;
                IF jogadas &gt; 1 then
                    jogadas := jogadas - 1;
                END IF;
            ELSIF (matriz(linha, coluna) = pos4 and acertos(3) = &apos;0&apos;) then
                acertou &lt;= &apos;1&apos;;
                acertos(3) := &apos;1&apos;;
                acertos_necessarios := acertos_necessarios - 1;
                IF jogadas &gt; 1 then
                    jogadas := jogadas - 1;
                END IF;
            ELSE 
                errou &lt;= &apos;1&apos;;
                jogadas := jogadas - 1;
            END IF;

        END IF; --MODO
        
        --Saídas de debug
        posicao1 &lt;= pos1;
        posicao2 &lt;= pos2;
        posicao3 &lt;= pos3;
        posicao4 &lt;= pos4;
        linhaOut &lt;= linhaVet;
        colunaOut &lt;= colunaVet;

        -- Convertendo as variaveis para o tipo STD_LOGIC_VECTOR e atribuindo as saidas
        jogadas_restantes &lt;= std_logic_vector(to_unsigned(jogadas, jogadas_restantes&apos;length));
        acertos_restantes &lt;= std_logic_vector(to_unsigned(acertos_necessarios, acertos_restantes&apos;length));

    END IF; --CLOCK
    END PROCESS;
END Behavior_Tabuleiro;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>input_invalido,acertou,errou,jogadas_restantes:3,acertos_restantes:3,posicao1:4,posicao2:4,posicao3:4,posicao4:4,linhaOut:2,colunaOut:2</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>20</int>
        </entry>
      </elementAttributes>
      <pos x="620" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>escolha-jogador</string>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="520" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>codificacao-barco</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="520" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>orientacao-barco3</string>
        </entry>
      </elementAttributes>
      <pos x="520" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>modo</string>
        </entry>
      </elementAttributes>
      <pos x="520" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>clock</string>
        </entry>
      </elementAttributes>
      <pos x="520" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>invalido</string>
        </entry>
      </elementAttributes>
      <pos x="1200" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>pos1</string>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="1220" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>pos2</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1220" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>pos3</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1220" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>pos4</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="1220" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>barco</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="520" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>acertou</string>
        </entry>
      </elementAttributes>
      <pos x="1200" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>errou</string>
        </entry>
      </elementAttributes>
      <pos x="1200" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>linha</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="1220" y="720"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>coluna</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="1220" y="780"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>jogadas</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="1200" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>acertos</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="1220" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="520" y="240"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="1020" y="480"/>
      <p2 x="1180" y="480"/>
    </wire>
    <wire>
      <p1 x="1200" y="480"/>
      <p2 x="1220" y="480"/>
    </wire>
    <wire>
      <p1 x="520" y="480"/>
      <p2 x="560" y="480"/>
    </wire>
    <wire>
      <p1 x="600" y="480"/>
      <p2 x="620" y="480"/>
    </wire>
    <wire>
      <p1 x="1020" y="420"/>
      <p2 x="1180" y="420"/>
    </wire>
    <wire>
      <p1 x="1200" y="420"/>
      <p2 x="1220" y="420"/>
    </wire>
    <wire>
      <p1 x="520" y="420"/>
      <p2 x="620" y="420"/>
    </wire>
    <wire>
      <p1 x="1020" y="520"/>
      <p2 x="1140" y="520"/>
    </wire>
    <wire>
      <p1 x="1020" y="360"/>
      <p2 x="1120" y="360"/>
    </wire>
    <wire>
      <p1 x="1180" y="360"/>
      <p2 x="1200" y="360"/>
    </wire>
    <wire>
      <p1 x="520" y="360"/>
      <p2 x="560" y="360"/>
    </wire>
    <wire>
      <p1 x="600" y="360"/>
      <p2 x="620" y="360"/>
    </wire>
    <wire>
      <p1 x="1160" y="300"/>
      <p2 x="1200" y="300"/>
    </wire>
    <wire>
      <p1 x="520" y="300"/>
      <p2 x="580" y="300"/>
    </wire>
    <wire>
      <p1 x="1020" y="460"/>
      <p2 x="1200" y="460"/>
    </wire>
    <wire>
      <p1 x="580" y="460"/>
      <p2 x="620" y="460"/>
    </wire>
    <wire>
      <p1 x="1100" y="780"/>
      <p2 x="1220" y="780"/>
    </wire>
    <wire>
      <p1 x="520" y="620"/>
      <p2 x="600" y="620"/>
    </wire>
    <wire>
      <p1 x="1140" y="240"/>
      <p2 x="1200" y="240"/>
    </wire>
    <wire>
      <p1 x="520" y="240"/>
      <p2 x="600" y="240"/>
    </wire>
    <wire>
      <p1 x="1020" y="560"/>
      <p2 x="1100" y="560"/>
    </wire>
    <wire>
      <p1 x="1120" y="720"/>
      <p2 x="1220" y="720"/>
    </wire>
    <wire>
      <p1 x="1020" y="400"/>
      <p2 x="1160" y="400"/>
    </wire>
    <wire>
      <p1 x="560" y="400"/>
      <p2 x="620" y="400"/>
    </wire>
    <wire>
      <p1 x="1120" y="180"/>
      <p2 x="1200" y="180"/>
    </wire>
    <wire>
      <p1 x="1020" y="500"/>
      <p2 x="1160" y="500"/>
    </wire>
    <wire>
      <p1 x="1140" y="660"/>
      <p2 x="1220" y="660"/>
    </wire>
    <wire>
      <p1 x="560" y="440"/>
      <p2 x="620" y="440"/>
    </wire>
    <wire>
      <p1 x="1020" y="440"/>
      <p2 x="1200" y="440"/>
    </wire>
    <wire>
      <p1 x="1160" y="600"/>
      <p2 x="1220" y="600"/>
    </wire>
    <wire>
      <p1 x="520" y="540"/>
      <p2 x="580" y="540"/>
    </wire>
    <wire>
      <p1 x="1180" y="540"/>
      <p2 x="1220" y="540"/>
    </wire>
    <wire>
      <p1 x="1020" y="540"/>
      <p2 x="1120" y="540"/>
    </wire>
    <wire>
      <p1 x="580" y="380"/>
      <p2 x="620" y="380"/>
    </wire>
    <wire>
      <p1 x="1020" y="380"/>
      <p2 x="1140" y="380"/>
    </wire>
    <wire>
      <p1 x="560" y="360"/>
      <p2 x="560" y="400"/>
    </wire>
    <wire>
      <p1 x="560" y="440"/>
      <p2 x="560" y="480"/>
    </wire>
    <wire>
      <p1 x="1120" y="180"/>
      <p2 x="1120" y="360"/>
    </wire>
    <wire>
      <p1 x="1120" y="540"/>
      <p2 x="1120" y="720"/>
    </wire>
    <wire>
      <p1 x="1200" y="460"/>
      <p2 x="1200" y="480"/>
    </wire>
    <wire>
      <p1 x="1200" y="420"/>
      <p2 x="1200" y="440"/>
    </wire>
    <wire>
      <p1 x="580" y="460"/>
      <p2 x="580" y="540"/>
    </wire>
    <wire>
      <p1 x="580" y="300"/>
      <p2 x="580" y="380"/>
    </wire>
    <wire>
      <p1 x="1140" y="520"/>
      <p2 x="1140" y="660"/>
    </wire>
    <wire>
      <p1 x="1140" y="240"/>
      <p2 x="1140" y="380"/>
    </wire>
    <wire>
      <p1 x="600" y="480"/>
      <p2 x="600" y="620"/>
    </wire>
    <wire>
      <p1 x="600" y="240"/>
      <p2 x="600" y="360"/>
    </wire>
    <wire>
      <p1 x="1160" y="500"/>
      <p2 x="1160" y="600"/>
    </wire>
    <wire>
      <p1 x="1160" y="300"/>
      <p2 x="1160" y="400"/>
    </wire>
    <wire>
      <p1 x="1180" y="480"/>
      <p2 x="1180" y="540"/>
    </wire>
    <wire>
      <p1 x="1180" y="360"/>
      <p2 x="1180" y="420"/>
    </wire>
    <wire>
      <p1 x="1100" y="560"/>
      <p2 x="1100" y="780"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>